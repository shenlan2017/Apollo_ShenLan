syntax = "proto2";

package apollo.canbus;

message Throttle_command_100 {
// Control Message
  enum Throttle_en_ctrlType {
    THROTTLE_EN_CTRL_DISABLE = 0;
    THROTTLE_EN_CTRL_ENABLE = 1;
  }
  // [m/s] [0|10.23]
  optional double speed_target = 1;
  // [m/s^2] [0|10]
  optional double throttle_acc = 2;
  // [] [0|255]
  optional int32 checksum_100 = 3;
  // [%] [0|100]
  optional double throttle_pedal_target = 4;
  // [] [0|1]
  optional Throttle_en_ctrlType throttle_en_ctrl = 5;
}

message Brake_command_101 {
// Control Message
  enum Aeb_en_ctrlType {
    AEB_EN_CTRL_DISABLE_AEB = 0;
    AEB_EN_CTRL_ENABLE_AEB = 1;
  }
  enum Brake_en_ctrlType {
    BRAKE_EN_CTRL_DISABLE = 0;
    BRAKE_EN_CTRL_ENABLE = 1;
  }
  // [] [0|0]
  optional Aeb_en_ctrlType aeb_en_ctrl = 1;
  // [m/s^2] [0|10]
  optional double brake_dec = 2;
  // [] [0|255]
  optional int32 checksum_101 = 3;
  // [%] [0|100]
  optional double brake_pedal_target = 4;
  // [] [0|1]
  optional Brake_en_ctrlType brake_en_ctrl = 5;
}

message Steering_command_102 {
// Control Message
  enum Steer_en_ctrlType {
    STEER_EN_CTRL_DISABLE = 0;
    STEER_EN_CTRL_ENABLE = 1;
  }
  // [] [0|1]
  optional Steer_en_ctrlType steer_en_ctrl = 1;
  // [deg] [-500|500]
  optional int32 steer_angle_target = 2;
  // [deg/s] [0|250]
  optional int32 steer_angle_spd_target = 3;
  // [] [0|255]
  optional int32 checksum_102 = 4;
}

message Gear_command_103 {
// Control Message
  enum Gear_targetType {
    GEAR_TARGET_INVALID = 0;
    GEAR_TARGET_PARK = 1;
    GEAR_TARGET_REVERSE = 2;
    GEAR_TARGET_NEUTRAL = 3;
    GEAR_TARGET_DRIVE = 4;
  }
  enum Gear_en_ctrlType {
    GEAR_EN_CTRL_DISABLE = 0;
    GEAR_EN_CTRL_ENABLE = 1;
  }
  // [] [0|4]
  optional Gear_targetType gear_target = 1;
  // [] [0|1]
  optional Gear_en_ctrlType gear_en_ctrl = 2;
  // [] [0|255]
  optional int32 checksum_103 = 3;
}

message Park_command_104 {
// Control Message
  enum Park_targetType {
    PARK_TARGET_RELEASE = 0;
    PARK_TARGET_PARKING_TRIGGER = 1;
  }
  enum Park_en_ctrlType {
    PARK_EN_CTRL_DISABLE = 0;
    PARK_EN_CTRL_ENABLE = 1;
  }
  // [] [0|255]
  optional int32 checksum_104 = 1;
  // [] [0|1]
  optional Park_targetType park_target = 2;
  // [] [0|1]
  optional Park_en_ctrlType park_en_ctrl = 3;
}

message Vehicle_mode_command_105 {
// Control Message
  enum Turn_light_ctrlType {
    TURN_LIGHT_CTRL_TURNLAMP_OFF = 0;
    TURN_LIGHT_CTRL_LEFT_TURNLAMP_ON = 1;
    TURN_LIGHT_CTRL_RIGHT_TURNLAMP_ON = 2;
    TURN_LIGHT_CTRL_HAZARD_WARNING_LAMPSTS_ON = 3;
  }
  enum Vin_reqType {
    VIN_REQ_VIN_REQ_DISABLE = 0;
    VIN_REQ_VIN_REQ_ENABLE = 1;
  }
  enum Drive_mode_ctrlType {
    DRIVE_MODE_CTRL_THROTTLE_PADDLE_DRIVE = 0;
    DRIVE_MODE_CTRL_SPEED_DRIVE = 1;
  }
  enum Steer_mode_ctrlType {
    STEER_MODE_CTRL_STANDARD_STEER = 0;
    STEER_MODE_CTRL_NON_DIRECTION_STEER = 1;
    STEER_MODE_CTRL_SYNC_DIRECTION_STEER = 2;
  }
  // [] [0|255]
  optional int32 checksum_105 = 1;
  // [] [0|7]
  optional Turn_light_ctrlType turn_light_ctrl = 2;
  // [] [0|1]
  optional Vin_reqType vin_req = 3;
  // [] [0|7]
  optional Drive_mode_ctrlType drive_mode_ctrl = 4;
  // [] [0|7]
  optional Steer_mode_ctrlType steer_mode_ctrl = 5;
}

message Chassiserrorcode_200 {
// Report Message
  enum Bms_communicationfaultType {
    BMS_COMMUNICATIONFAULT_CONNECTION = 0;
    BMS_COMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum ChassisrredsfaultType {
    CHASSISRREDSFAULT_NO_ERROR = 0;
    CHASSISRREDSFAULT_ERROR = 1;
  }
  enum ChassisrfedsfaultType {
    CHASSISRFEDSFAULT_NO_ERROR = 0;
    CHASSISRFEDSFAULT_ERROR = 1;
  }
  enum ChassislredsfaultType {
    CHASSISLREDSFAULT_NO_ERROR = 0;
    CHASSISLREDSFAULT_ERROR = 1;
  }
  enum ChassislfedsfaultType {
    CHASSISLFEDSFAULT_NO_ERROR = 0;
    CHASSISLFEDSFAULT_ERROR = 1;
  }
  enum ChassisfrontepsfaultType {
    CHASSISFRONTEPSFAULT_NO_ERROR = 0;
    CHASSISFRONTEPSFAULT_ERROR = 1;
  }
  enum ChassisebsfaultType {
    CHASSISEBSFAULT_NO_ERROR = 0;
    CHASSISEBSFAULT_ERROR = 1;
  }
  enum ChassisbackepsfaultType {
    CHASSISBACKEPSFAULT_NO_ERROR = 0;
    CHASSISBACKEPSFAULT_ERROR = 1;
  }
  enum LeadacidbatterylowType {
    LEADACIDBATTERYLOW_NO_ERROR = 0;
    LEADACIDBATTERYLOW_ERROR = 1;
  }
  enum ControlercommunicationfaultType {
    CONTROLERCOMMUNICATIONFAULT_CONNECTION = 0;
    CONTROLERCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Eps_rearcommunicationfaultType {
    EPS_REARCOMMUNICATIONFAULT_CONNECTION = 0;
    EPS_REARCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Eps_frontcommunicationfaultType {
    EPS_FRONTCOMMUNICATIONFAULT_CONNECTION = 0;
    EPS_FRONTCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Eds_rrcommunicationfaultType {
    EDS_RRCOMMUNICATIONFAULT_CONNECTION = 0;
    EDS_RRCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Eds_rfcommunicationfaultType {
    EDS_RFCOMMUNICATIONFAULT_CONNECTION = 0;
    EDS_RFCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Eds_lrcommunicationfaultType {
    EDS_LRCOMMUNICATIONFAULT_CONNECTION = 0;
    EDS_LRCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Eds_lfcommunicationfaultType {
    EDS_LFCOMMUNICATIONFAULT_CONNECTION = 0;
    EDS_LFCOMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  enum Ebs_communicationfaultType {
    EBS_COMMUNICATIONFAULT_CONNECTION = 0;
    EBS_COMMUNICATIONFAULT_DISCONNECTION = 1;
  }
  // [] [0|0]
  optional Bms_communicationfaultType bms_communicationfault = 1;
  // [] [0|0]
  optional ChassisrredsfaultType chassisrredsfault = 2;
  // [] [0|0]
  optional ChassisrfedsfaultType chassisrfedsfault = 3;
  // [] [0|0]
  optional ChassislredsfaultType chassislredsfault = 4;
  // [] [0|0]
  optional ChassislfedsfaultType chassislfedsfault = 5;
  // [] [0|0]
  optional ChassisfrontepsfaultType chassisfrontepsfault = 6;
  // [] [0|0]
  optional ChassisebsfaultType chassisebsfault = 7;
  // [] [0|0]
  optional ChassisbackepsfaultType chassisbackepsfault = 8;
  // [] [0|0]
  optional bool chassisemergencysta = 9;
  // [] [0|0]
  optional LeadacidbatterylowType leadacidbatterylow = 10;
  // [] [0|0]
  optional ControlercommunicationfaultType controlercommunicationfault = 11;
  // [] [0|0]
  optional bool chassiscrashsta = 12;
  // [] [0|0]
  optional Eps_rearcommunicationfaultType eps_rearcommunicationfault = 13;
  // [] [0|0]
  optional Eps_frontcommunicationfaultType eps_frontcommunicationfault = 14;
  // [] [0|0]
  optional Eds_rrcommunicationfaultType eds_rrcommunicationfault = 15;
  // [] [0|0]
  optional Eds_rfcommunicationfaultType eds_rfcommunicationfault = 16;
  // [] [0|0]
  optional Eds_lrcommunicationfaultType eds_lrcommunicationfault = 17;
  // [] [0|0]
  optional Eds_lfcommunicationfaultType eds_lfcommunicationfault = 18;
  // [] [0|0]
  optional Ebs_communicationfaultType ebs_communicationfault = 19;
  // [] [0|0]
  optional int32 chassisvcuothererr = 20;
}

message Chassiserrorcode_1_201 {
// Report Message
  // [] [0|0]
  optional int32 chassisbmserrorcode = 1;
  // [] [0|0]
  optional int32 chassisbackepserrorcode = 2;
  // [] [0|0]
  optional int32 chassisedstype = 3;
  // [] [0|0]
  optional int32 chassisfrontepserrorcode = 4;
  // [] [0|0]
  optional int32 chassisepstype = 5;
  // [] [0|0]
  optional int32 chassisepbtype = 6;
  // [] [0|0]
  optional int32 chassisepberrorcode = 7;
  // [] [0|0]
  optional int32 chassisebstype = 8;
  // [] [0|0]
  optional int32 chassisebserrorcode = 9;
}

message Chassiserrorcode_2_202 {
// Report Message
  // [] [0|0]
  optional int32 chassisrredserrorcode2 = 1;
  // [] [0|0]
  optional int32 chassisrfedserrorcode2 = 2;
  // [] [0|0]
  optional int32 chassislredserrorcode2 = 3;
  // [] [0|0]
  optional int32 chassislfedserrorcode2 = 4;
  // [] [0|0]
  optional int32 chassisrredserrorcode = 5;
  // [] [0|0]
  optional int32 chassisrfedserrorcode = 6;
  // [] [0|0]
  optional int32 chassislredserrorcode = 7;
  // [] [0|0]
  optional int32 chassislfedserrorcode = 8;
}

message Triggerfault_210 {
// Report Message
  enum TriggertebsfaultType {
    TRIGGERTEBSFAULT_NONTRIGGER = 0;
    TRIGGERTEBSFAULT_TRIGGER = 1;
  }
  enum TriggerrredsfaultType {
    TRIGGERRREDSFAULT_NONTRIGGER = 0;
    TRIGGERRREDSFAULT_TRIGGER = 1;
  }
  enum TriggerrfedsfaultType {
    TRIGGERRFEDSFAULT_NONTRIGGER = 0;
    TRIGGERRFEDSFAULT_TRIGGER = 1;
  }
  enum TriggerlredsfaultType {
    TRIGGERLREDSFAULT_NONTRIGGER = 0;
    TRIGGERLREDSFAULT_TRIGGER = 1;
  }
  enum TriggerlfedsfaultType {
    TRIGGERLFEDSFAULT_NONTRIGGER = 0;
    TRIGGERLFEDSFAULT_TRIGGER = 1;
  }
  enum TriggerfrontepsfaultType {
    TRIGGERFRONTEPSFAULT_NONTRIGGER = 0;
    TRIGGERFRONTEPSFAULT_TRIGGER = 1;
  }
  enum TriggerbacktepsfaultType {
    TRIGGERBACKTEPSFAULT_NONTRIGGER = 0;
    TRIGGERBACKTEPSFAULT_TRIGGER = 1;
  }
  // [] [0|0]
  optional TriggertebsfaultType triggertebsfault = 1;
  // [] [0|0]
  optional TriggerrredsfaultType triggerrredsfault = 2;
  // [] [0|0]
  optional TriggerrfedsfaultType triggerrfedsfault = 3;
  // [] [0|0]
  optional TriggerlredsfaultType triggerlredsfault = 4;
  // [] [0|0]
  optional TriggerlfedsfaultType triggerlfedsfault = 5;
  // [] [0|0]
  optional TriggerfrontepsfaultType triggerfrontepsfault = 6;
  // [] [0|0]
  optional TriggerbacktepsfaultType triggerbacktepsfault = 7;
}

message Throttle_report_500 {
// Report Message
  enum Throttle_flt2Type {
    THROTTLE_FLT2_NO_FAULT = 0;
    THROTTLE_FLT2_DRIVE_SYSTEM_COMUNICATION_FAULT = 1;
  }
  enum Throttle_flt1Type {
    THROTTLE_FLT1_NO_FAULT = 0;
    THROTTLE_FLT1_DRIVE_SYSTEM_HARDWARE_FAULT = 1;
  }
  enum Throttle_en_stateType {
    THROTTLE_EN_STATE_MANUAL = 0;
    THROTTLE_EN_STATE_AUTO = 1;
    THROTTLE_EN_STATE_TAKEOVER = 2;
    THROTTLE_EN_STATE_STANDBY = 3;
  }
  // [%] [0|100]
  optional double throttle_pedal_actual = 1;
  // Drive system communication fault [] [0|1]
  optional Throttle_flt2Type throttle_flt2 = 2;
  // Drive system hardware fault [] [0|1]
  optional Throttle_flt1Type throttle_flt1 = 3;
  // [] [0|2]
  optional Throttle_en_stateType throttle_en_state = 4;
}

message Brake_report_501 {
// Report Message
  enum Brake_flt2Type {
    BRAKE_FLT2_NO_FAULT = 0;
    BRAKE_FLT2_BRAKE_SYSTEM_COMUNICATION_FAULT = 1;
  }
  enum Brake_flt1Type {
    BRAKE_FLT1_NO_FAULT = 0;
    BRAKE_FLT1_BRAKE_SYSTEM_HARDWARE_FAULT = 1;
  }
  enum Brake_en_stateType {
    BRAKE_EN_STATE_MANUAL = 0;
    BRAKE_EN_STATE_AUTO = 1;
    BRAKE_EN_STATE_TAKEOVER = 2;
    BRAKE_EN_STATE_STANDBY = 3;
  }
  // [%] [0|100]
  optional double brake_pedal_actual = 1;
  // Brake system communication fault [] [0|1]
  optional Brake_flt2Type brake_flt2 = 2;
  // Brake system hardware fault [] [0|1]
  optional Brake_flt1Type brake_flt1 = 3;
  // [] [0|2]
  optional Brake_en_stateType brake_en_state = 4;
}

message Steering_report_502 {
// Report Message
  enum Steer_flt2Type {
    STEER_FLT2_NO_FAULT = 0;
    STEER_FLT2_STEER_SYSTEM_COMUNICATION_FAULT = 1;
  }
  enum Steer_flt1Type {
    STEER_FLT1_NO_FAULT = 0;
    STEER_FLT1_STEER_SYSTEM_HARDWARE_FAULT = 1;
  }
  enum Steer_en_stateType {
    STEER_EN_STATE_MANUAL = 0;
    STEER_EN_STATE_AUTO = 1;
    STEER_EN_STATE_TAKEOVER = 2;
    STEER_EN_STATE_STANDBY = 3;
  }
  // [deg] [-500|500]
  optional int32 steer_angle_rear_actual = 1;
  // [deg/s] [0|0]
  optional int32 steer_angle_spd_actual = 2;
  // Steer system communication fault [] [0|255]
  optional Steer_flt2Type steer_flt2 = 3;
  // Steer system hardware fault [] [0|255]
  optional Steer_flt1Type steer_flt1 = 4;
  // [] [0|2]
  optional Steer_en_stateType steer_en_state = 5;
  // [deg] [-500|500]
  optional int32 steer_angle_actual = 6;
}

message Gear_report_503 {
// Report Message
  enum Gear_fltType {
    GEAR_FLT_NO_FAULT = 0;
    GEAR_FLT_FAULT = 1;
  }
  enum Gear_actualType {
    GEAR_ACTUAL_INVALID = 0;
    GEAR_ACTUAL_PARK = 1;
    GEAR_ACTUAL_REVERSE = 2;
    GEAR_ACTUAL_NEUTRAL = 3;
    GEAR_ACTUAL_DRIVE = 4;
  }
  // [] [0|1]
  optional Gear_fltType gear_flt = 1;
  // [] [0|4]
  optional Gear_actualType gear_actual = 2;
}

message Park_report_504 {
// Report Message
  enum Parking_actualType {
    PARKING_ACTUAL_RELEASE = 0;
    PARKING_ACTUAL_PARKING_TRIGGER = 1;
  }
  enum Park_fltType {
    PARK_FLT_NO_FAULT = 0;
    PARK_FLT_FAULT = 1;
  }
  // [] [0|1]
  optional Parking_actualType parking_actual = 1;
  // [] [0|1]
  optional Park_fltType park_flt = 2;
}

message Vcu_report_505 {
// Report Message
  enum Vehicle_mode_stateType {
    VEHICLE_MODE_STATE_MANUAL_REMOTE_MODE = 0;
    VEHICLE_MODE_STATE_AUTO_MODE = 1;
    VEHICLE_MODE_STATE_EMERGENCY_MODE = 2;
    VEHICLE_MODE_STATE_STANDBY_MODE = 3;
  }
  enum Aeb_modeType {
    AEB_MODE_DISABLE = 0;
    AEB_MODE_ENABLE = 1;
  }
  enum Brake_light_actualType {
    BRAKE_LIGHT_ACTUAL_BRAKELIGHT_OFF = 0;
    BRAKE_LIGHT_ACTUAL_BRAKELIGHT_ON = 1;
  }
  enum Turn_light_actualType {
    TURN_LIGHT_ACTUAL_TURNLAMPSTS_OFF = 0;
    TURN_LIGHT_ACTUAL_LEFT_TURNLAMPSTS_ON = 1;
    TURN_LIGHT_ACTUAL_RIGHT_TURNLAMPSTS_ON = 2;
    TURN_LIGHT_ACTUAL_HAZARD_WARNING_LAMPSTS_ON = 3;
  }
  enum Drive_mode_stsType {
    DRIVE_MODE_STS_THROTTLE_PADDLE_DRIVE_MODE = 0;
    DRIVE_MODE_STS_SPEED_DRIVE_MODE = 1;
  }
  enum Steer_mode_stsType {
    STEER_MODE_STS_STANDARD_STEER_MODE = 0;
    STEER_MODE_STS_NON_DIRECTION_STEER_MODE = 1;
    STEER_MODE_STS_SYNC_DIRECTION_STEER_MODE = 2;
  }
  enum Frontcrash_stateType {
    FRONTCRASH_STATE_NO_EVENT = 0;
    FRONTCRASH_STATE_CRASH_EVENT = 1;
  }
  enum Backcrash_stateType {
    BACKCRASH_STATE_NO_EVENT = 0;
    BACKCRASH_STATE_CRASH_EVENT = 1;
  }
  enum Aeb_brake_stateType {
    AEB_BRAKE_STATE_INACTIVE = 0;
    AEB_BRAKE_STATE_ACTIVE = 1;
  }
  // [] [0|0]
  optional Vehicle_mode_stateType vehicle_mode_state = 1;
  // describle the vehicle AEB mode whether was set [] [0|1]
  optional Aeb_modeType aeb_mode = 2;
  // [] [0|1]
  optional Brake_light_actualType brake_light_actual = 3;
  // [] [0|0]
  optional Turn_light_actualType turn_light_actual = 4;
  // [] [0|255]
  optional int32 chassis_errcode = 5;
  // [] [0|7]
  optional Drive_mode_stsType drive_mode_sts = 6;
  // [] [0|7]
  optional Steer_mode_stsType steer_mode_sts = 7;
  // [] [0|0]
  optional Frontcrash_stateType frontcrash_state = 8;
  // [] [0|0]
  optional Backcrash_stateType backcrash_state = 9;
  // describe the vehicle e-brake command whether was triggered by AEB [] [0|0]
  optional Aeb_brake_stateType aeb_brake_state = 10;
  // [m/s^2] [-10|10]
  optional double acc = 11;
  // [m/s] [-32.768|32.767]
  optional double speed = 12;
}

message Wheelspeed_report_506 {
// Report Message
  // [m/s] [0|65.535]
  optional double rr = 1;
  // [m/s] [0|65.535]
  optional double rl = 2;
  // [m/s] [0|65.535]
  optional double fr = 3;
  // [m/s] [0|65.535]
  optional double fl = 4;
}

message Ultr_sensor_1_507 {
// Report Message
  // [cm] [0|65535]
  optional double uiuss9_tof_direct = 1;
  // [cm] [0|65535]
  optional double uiuss8_tof_direct = 2;
  // [cm] [0|65535]
  optional double uiuss11_tof_direct = 3;
  // [cm] [0|65535]
  optional double uiuss10_tof_direct = 4;
}

message Ultr_sensor_2_508 {
// Report Message
  // [cm] [0|65535]
  optional double uiuss9_tof_indirect = 1;
  // [cm] [0|65535]
  optional double uiuss8_tof_indirect = 2;
  // [cm] [0|65535]
  optional double uiuss11_tof_indirect = 3;
  // [cm] [0|65535]
  optional double uiuss10_tof_indirect = 4;
}

message Ultr_sensor_3_509 {
// Report Message
  // [cm] [0|65535]
  optional double uiuss5_tof_direct = 1;
  // [cm] [0|65535]
  optional double uiuss4_tof_direct = 2;
  // [cm] [0|65535]
  optional double uiuss3_tof_direct = 3;
  // [cm] [0|65535]
  optional double uiuss2_tof_direct = 4;
}

message Ultr_sensor_4_510 {
// Report Message
  // [cm] [0|65535]
  optional double uiuss5_tof_indirect = 1;
  // [cm] [0|65535]
  optional double uiuss4_tof_indirect = 2;
  // [cm] [0|65535]
  optional double uiuss3_tof_indirect = 3;
  // [cm] [0|65535]
  optional double uiuss2_tof_indirect = 4;
}

message Ultr_sensor_5_511 {
// Report Message
  // [cm] [0|65535]
  optional double uiuss7_tof_direct = 1;
  // [cm] [0|65535]
  optional double uiuss6_tof_direct = 2;
  // [cm] [0|65535]
  optional double uiuss1_tof_direct = 3;
  // [cm] [0|65535]
  optional double uiuss0_tof_direct = 4;
}

message Bms_report_512 {
// Report Message
  // Battery Total Current [A] [-3200|3200]
  optional double battery_current = 1;
  // Battery Total Voltage [V] [0|300]
  optional double battery_voltage = 2;
  // Battery Soc percentage [%] [0|100]
  optional int32 battery_soc = 3;
}

message Vin_resp1_514 {
// Report Message
  // [] [0|255]
  optional int32 vin07 = 1;
  // [] [0|255]
  optional int32 vin06 = 2;
  // [] [0|255]
  optional int32 vin05 = 3;
  // [] [0|255]
  optional int32 vin04 = 4;
  // [] [0|255]
  optional int32 vin03 = 5;
  // [] [0|255]
  optional int32 vin02 = 6;
  // [] [0|255]
  optional int32 vin01 = 7;
  // [] [0|255]
  optional int32 vin00 = 8;
}

message Vin_resp2_515 {
// Report Message
  // [] [0|255]
  optional int32 vin15 = 1;
  // [] [0|255]
  optional int32 vin14 = 2;
  // [] [0|255]
  optional int32 vin13 = 3;
  // [] [0|255]
  optional int32 vin12 = 4;
  // [] [0|255]
  optional int32 vin11 = 5;
  // [] [0|255]
  optional int32 vin10 = 6;
  // [] [0|255]
  optional int32 vin09 = 7;
  // [] [0|255]
  optional int32 vin08 = 8;
}

message Vin_resp3_516 {
// Report Message
  // [] [0|255]
  optional int32 vin16 = 1;
}

message Devkit {
  optional Throttle_command_100 throttle_command_100 = 1; // control message
  optional Brake_command_101 brake_command_101 = 2; // control message
  optional Steering_command_102 steering_command_102 = 3; // control message
  optional Gear_command_103 gear_command_103 = 4; // control message
  optional Park_command_104 park_command_104 = 5; // control message
  optional Vehicle_mode_command_105 vehicle_mode_command_105 = 6; // control message
  optional Chassiserrorcode_200 chassiserrorcode_200 = 7; // report message
  optional Chassiserrorcode_1_201 chassiserrorcode_1_201 = 8; // report message
  optional Chassiserrorcode_2_202 chassiserrorcode_2_202 = 9; // report message
  optional Triggerfault_210 triggerfault_210 = 10; // report message
  optional Throttle_report_500 throttle_report_500 = 11; // report message
  optional Brake_report_501 brake_report_501 = 12; // report message
  optional Steering_report_502 steering_report_502 = 13; // report message
  optional Gear_report_503 gear_report_503 = 14; // report message
  optional Park_report_504 park_report_504 = 15; // report message
  optional Vcu_report_505 vcu_report_505 = 16; // report message
  optional Wheelspeed_report_506 wheelspeed_report_506 = 17; // report message
  optional Ultr_sensor_1_507 ultr_sensor_1_507 = 18; // report message
  optional Ultr_sensor_2_508 ultr_sensor_2_508 = 19; // report message
  optional Ultr_sensor_3_509 ultr_sensor_3_509 = 20; // report message
  optional Ultr_sensor_4_510 ultr_sensor_4_510 = 21; // report message
  optional Ultr_sensor_5_511 ultr_sensor_5_511 = 22; // report message
  optional Bms_report_512 bms_report_512 = 23; // report message
  optional Vin_resp1_514 vin_resp1_514 = 24; // report message
  optional Vin_resp2_515 vin_resp2_515 = 25; // report message
  optional Vin_resp3_516 vin_resp3_516 = 26; // report message
}
